{"version":3,"sources":["components/nav_bar/NavBar.tsx","components/note_list/note_item/todo_list/todo_item/TodoItem.tsx","components/note_list/note_item/todo_list/TodoList.tsx","components/note_list/note_item/NoteItem.tsx","components/note_list/NoteList.tsx","app/App.tsx","queries/noteQueries.ts","queries/todoQueries.ts","stores/MainStore.ts","index.tsx"],"names":["NavBar","Menu","inverted","className","fixed","Container","Item","header","Icon","name","Component","TodoItem","inject","observer","state","todoDescription","props","todo","description","todoCheckbox","isChecked","onChange","e","setState","target","value","onEnterDown","key","preventDefault","onUpdateDescription","blur","trim","updateTodo","store","deleteTodo","noteId","_id","onToggleCheck","newTodoCheckBox","nextProps","this","Checkbox","checked","html","onBlur","onKeyDown","Button","circular","icon","onClick","bind","TodoList","todos","slice","sort","todo1","todo2","Date","createdAt","map","NoteItem","newTodoString","titleString","note","title","inputString","action","onUpdateTitle","updateTitle","onAddTodo","addTodo","Card","Content","placeholder","Meta","toLocaleDateString","Description","deleteNote","Notes","notes","App","getNotes","Grid","centered","NoteList","length","addNote","Queries","notesQuery","addNoteQuery","updateTitleQuery","deleteNoteQuery","addTodoQuery","updateTodoQuery","todoId","deleteTodoQuery","MainStore","renderNotes","data","note1","note2","console","log","dbOperation","NoteQueries","renderAddNote","unshift","createNote","find","renderUpdateTitle","renderDeleteNote","deleted","filter","renderAddTodo","todoNote","TodoQueries","createTodo","renderUpdateTodo","updatedTodo","renderDeleteTodo","query","handleData","fetch","method","body","JSON","stringify","headers","then","res","status","Error","json","resData","catch","err","decorate","observable","Root","Store","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c38143c3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Container, Menu, Icon } from 'semantic-ui-react'\r\nimport './NavBar.css'\r\n\r\nclass NavBar extends Component {\r\n    render() {\r\n        return (\r\n            <Menu inverted className=\"navBar\" fixed=\"top\">\r\n                <Container className=\"navBarContainer\">\r\n                    <Menu.Item header>\r\n                        <Icon className=\"logo\" name=\"sticky note outline\"/>\r\n                        TODO\r\n                    </Menu.Item>\r\n                </Container>\r\n            </Menu>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavBar;","import React, { Component } from 'react'\r\nimport ContentEditable, { ContentEditableEvent } from 'react-contenteditable'\r\nimport { Button, Checkbox } from 'semantic-ui-react'\r\nimport { inject, observer } from 'mobx-react';\r\nimport './TodoItem.css';\r\nimport { MainStore } from '../../../../../stores/MainStore';\r\nimport Todo from '../../../../../models/todo';\r\n\r\ninterface Props {\r\n    store?: MainStore;\r\n    todo: Todo;\r\n    noteId: string;\r\n}\r\n\r\nconst enterKey: string = 'Enter';\r\n\r\n@inject('store')\r\n@observer\r\nclass TodoItem extends Component<Props> {\r\n    state = {\r\n        todoDescription: this.props.todo.description,\r\n        todoCheckbox: this.props.todo.isChecked\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps: Props) {\r\n        this.setState({\r\n            todoDescription: nextProps.todo.description,\r\n            todoCheckbox: nextProps.todo.isChecked\r\n        });\r\n    }\r\n\r\n    onChange = (e: ContentEditableEvent) => {\r\n        this.setState({\r\n            todoDescription: e.target.value\r\n        })\r\n    }\r\n\r\n    onEnterDown = (e: any) => {\r\n        if (e.key === enterKey) {\r\n            e.preventDefault();\r\n            this.onUpdateDescription();\r\n            e.target.blur();\r\n        }\r\n    }\r\n\r\n    onUpdateDescription = () => {\r\n        if (this.props.todo.description === this.state.todoDescription) {\r\n            return;\r\n        }\r\n        if (this.state.todoDescription.trim()) {\r\n            this.updateTodo(this.state.todoCheckbox);\r\n        }\r\n        else {\r\n            this.props.store.deleteTodo(this.props.noteId, this.props.todo._id);\r\n        }\r\n    }\r\n\r\n    onToggleCheck = () => {\r\n        let newTodoCheckBox = !this.state.todoCheckbox;\r\n        this.setState({\r\n            todoCheckbox: newTodoCheckBox\r\n        });\r\n        this.updateTodo(newTodoCheckBox);\r\n    }\r\n\r\n    updateTodo = (isChecked: boolean) => {\r\n        let updateTodo: Todo = {\r\n            ...this.props.todo,\r\n            description: this.state.todoDescription,\r\n            isChecked\r\n        }\r\n        this.props.store.updateTodo(this.props.noteId, updateTodo);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"todoContainer\">\r\n                <Checkbox\r\n                    className=\"todoCheckbox\"\r\n                    checked={this.state.todoCheckbox}\r\n                    onChange={this.onToggleCheck}\r\n                />\r\n                <ContentEditable\r\n                    className=\"customInput todoDescription\"\r\n                    html={this.state.todoDescription}\r\n                    onBlur={this.onUpdateDescription}\r\n                    onKeyDown={this.onEnterDown}\r\n                    onChange={this.onChange}\r\n                />\r\n                <Button\r\n                    className=\"deleteTodoButton\"\r\n                    circular icon='cancel'\r\n                    onClick={this.props.store.deleteTodo.bind(this, this.props.noteId, this.props.todo._id)}>\r\n                </Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoItem;\r\n","import React, { Component } from 'react';\r\nimport TodoItem from './todo_item/TodoItem'\r\nimport Todo from '../../../../models/todo';\r\n\r\ninterface Props {\r\n    todos: Todo[];\r\n    noteId: string;\r\n}  \r\n\r\nclass TodoList extends Component<Props> {\r\n    render() {\r\n        let sortedTodo = this.props.todos.slice().sort((todo1: Todo, todo2: Todo) => {\r\n            return new Date(todo1.createdAt) > new Date(todo2.createdAt) ? -1 : 1;\r\n        });\r\n        return sortedTodo.map((todo: Todo) => (\r\n            <TodoItem\r\n                todo={todo}\r\n                noteId={this.props.noteId}\r\n            />\r\n        ));\r\n    }\r\n}\r\n\r\nexport default TodoList;","import React, { Component } from 'react'\r\nimport ContentEditable, { ContentEditableEvent } from 'react-contenteditable'\r\nimport { Card, Button, Icon } from 'semantic-ui-react'\r\nimport TodoList from './todo_list/TodoList';\r\nimport { inject, observer } from 'mobx-react';\r\nimport './NoteItem.css';\r\nimport {MainStore} from '../../../stores/MainStore'\r\nimport Note from '../../../models/Note';\r\n\r\ninterface Props {\r\n    store?: MainStore;\r\n    note: Note;\r\n}\r\n\r\n@inject('store')\r\n@observer\r\nclass NoteItem extends Component<Props> {\r\n    state = {\r\n        newTodoString: '',\r\n        titleString: this.props.note.title.trim()\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps: Props) {\r\n        this.setState({\r\n            titleString: nextProps.note.title.trim()\r\n        });\r\n    }\r\n\r\n    onChange = (inputString: string, e: ContentEditableEvent) => {\r\n        this.setState({\r\n            [inputString]: e.target.value\r\n        });\r\n    }\r\n\r\n    onEnterDown = (action: Function, e: React.KeyboardEvent<HTMLDivElement>) => {\r\n        if (e.key === 'Enter') {\r\n            action(e);\r\n        }\r\n    }\r\n\r\n    onUpdateTitle = (e: any) => {\r\n        if (!this.state.titleString.trim()) {\r\n            this.setState({ titleString: '' });\r\n        }\r\n        this.props.store.updateTitle(this.props.note._id, this.state.titleString);\r\n        e.target.blur();\r\n    }\r\n\r\n    onAddTodo = (e: React.FocusEvent<HTMLDivElement>) => {\r\n        e.preventDefault();\r\n        if (this.state.newTodoString.trim()) {\r\n            this.props.store.addTodo(this.props.note._id, this.state.newTodoString);\r\n            this.setState({\r\n                newTodoString: ''\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { _id, todos, createdAt } = this.props.note;\r\n        return <div>\r\n            <Card className=\"noteCard\">\r\n                <Card.Content>\r\n                    <ContentEditable\r\n                        className=\"customInput noteTitle\"\r\n                        html={this.state.titleString}\r\n                        placeholder=\"Title\"\r\n                        onChange={this.onChange.bind(this, 'titleString')}\r\n                        onBlur={this.onUpdateTitle}\r\n                        onKeyDown={this.onEnterDown.bind(this, this.onUpdateTitle)} >\r\n                    </ContentEditable>\r\n                    <Card.Meta\r\n                        className=\"noteDate\">\r\n                        {new Date(createdAt).toLocaleDateString()}\r\n                    </Card.Meta>\r\n                    <Card.Description>\r\n                        <div>\r\n                            <Icon name='plus' />\r\n                            <ContentEditable\r\n                                className=\"customInput addTodoInput\"\r\n                                html={this.state.newTodoString}\r\n                                placeholder=\"New todo\"\r\n                                onBlur={this.onAddTodo}\r\n                                onKeyDown={this.onEnterDown.bind(this, this.onAddTodo)}\r\n                                onChange={this.onChange.bind(this, 'newTodoString')}\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"todoListContainer\">\r\n                            <TodoList\r\n                                todos={todos}\r\n                                noteId={_id}\r\n                            />\r\n                        </div>\r\n                        <Button\r\n                            className=\"deleteNoteButton\"\r\n                            icon='trash'\r\n                            onClick={this.props.store.deleteNote.bind(this, _id)}>\r\n                        </Button>\r\n                    </Card.Description>\r\n                </Card.Content>\r\n            </Card>\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default NoteItem;\r\n\r\n","import React, { Component } from 'react';\r\nimport NoteItem from './note_item/NoteItem'\r\nimport { inject, observer } from 'mobx-react';\r\nimport { MainStore } from '../../stores/MainStore'\r\nimport Note from '../../models/Note'\r\n\r\ninterface Props {\r\n    store?: MainStore;\r\n}\r\n\r\n@inject('store')\r\n@observer\r\nclass Notes extends Component<Props> {\r\n    render() {\r\n        return this.props.store.notes.map((note: Note) => (\r\n            <NoteItem note={note} />\r\n        ));\r\n    }\r\n}\r\n\r\nexport default Notes;","import React, { Component } from 'react';\r\nimport NavBar from '../components/nav_bar/NavBar';\r\nimport NoteList from '../components/note_list/NoteList';\r\nimport './App.css';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { Button, Grid } from 'semantic-ui-react'\r\nimport { inject, observer } from 'mobx-react';\r\nimport { MainStore } from '../stores/MainStore'\r\n\r\ninterface Props {\r\n  store?: MainStore;\r\n}\r\n\r\n@inject('store')\r\n@observer\r\nclass App extends Component<Props> {\r\n  componentDidMount() {\r\n    this.props.store.getNotes();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\"> \r\n        <NavBar />\r\n        <div className=\"navBarPlaceholder\" />\r\n        <div className=\"container\">\r\n          <Grid centered={true}>\r\n            <NoteList />\r\n          </Grid>\r\n          { this.props.store.notes.length < 10 && \r\n            <Button \r\n              circular icon = \"plus\"\r\n              className=\"addNoteButton\"\r\n              onClick={this.props.store.addNote}\r\n            /> \r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default App;","class QueriesStrings {\r\n    notesQuery: String = `\r\n        query {\r\n            notes {\r\n                _id\r\n                title\r\n                todos {\r\n                    _id\r\n                    description\r\n                    isChecked\r\n                    createdAt\r\n                }\r\n                createdAt\r\n            }\r\n        }\r\n    `;\r\n\r\n    addNoteQuery: String = `\r\n        mutation {\r\n            createNote {\r\n                _id\r\n                title\r\n                todos {\r\n                    _id\r\n                    description\r\n                    isChecked\r\n                    createdAt\r\n                }\r\n                createdAt\r\n            }\r\n        }\r\n    `;\r\n\r\n    updateTitleQuery = (noteId: String, titleString: String): String => `\r\n        mutation {\r\n            updateNoteTitle(updatedNote: {\r\n                _id: \"${noteId}\",\r\n                title: \"${titleString}\"\r\n            }) {\r\n                _id\r\n                title\r\n            }\r\n        }\r\n    `;\r\n\r\n    deleteNoteQuery = (noteId: String): String => `\r\n        mutation {\r\n            deleteNote(noteId: \"${noteId}\") {\r\n                _id\r\n            }\r\n        }\r\n    `;\r\n}\r\n\r\nconst Queries: QueriesStrings = new QueriesStrings();\r\nexport default Queries;","class Queriesstrings {\r\n    addTodoQuery = (noteId: string, description: string): string => `\r\n    mutation {\r\n        createTodo(newTodo:{description: \"${description}\", todoNote: \"${noteId}\"}) {\r\n            _id\r\n            description\r\n            isChecked\r\n            todoNote {\r\n                _id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nupdateTodoQuery = (todoId: string, description: string, isChecked: Boolean): string => `\r\n    mutation {\r\n        updateTodo(updatedTodo: {_id: \"${todoId}\", description: \"${description}\", isChecked: ${isChecked}}) {\r\n            _id\r\n            description\r\n            todoNote {\r\n                _id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\ndeleteTodoQuery = (todoId: string): string => `\r\n    mutation {\r\n        deleteTodo(todoId: \"${todoId}\") {\r\n            _id\r\n            todoNote {\r\n                _id\r\n            }\r\n        }\r\n    }\r\n`;\r\n}\r\n\r\nconst Queries: Queriesstrings = new Queriesstrings();\r\nexport default Queries;","import { observable, action, decorate } from 'mobx';\r\nimport NoteQueries from '../queries/noteQueries';\r\nimport TodoQueries from '../queries/todoQueries';\r\nimport Note from '../models/Note';\r\nimport Todo from '../models/todo';\r\n\r\nconst serverUrl = 'https://todoprojectbackend.herokuapp.com/graphql';\r\n\r\nexport class MainStore {\r\n\r\n  notes: Note[] = [];\r\n\r\n  renderNotes = (data: any) => {\r\n    if (data.notes) {\r\n      this.notes = data.notes.slice().sort(\r\n        (note1: Note, note2: Note) => {\r\n          return new Date(note1.createdAt) > new Date(note2.createdAt) ? -1 : 1;\r\n        })\r\n    }\r\n    else {\r\n      console.log('Get notes: No data retreived from backend.');\r\n      return;\r\n    }\r\n  };\r\n\r\n  getNotes = () => {\r\n    this.dbOperation(NoteQueries.notesQuery, this.renderNotes);\r\n  }\r\n\r\n  renderAddNote = () => {\r\n    this.notes.unshift({\r\n      _id: '',\r\n      title: '',\r\n      todos: [],\r\n      createdAt: null\r\n    });\r\n  }\r\n\r\n  addNote = () => {\r\n    this.renderAddNote();\r\n\r\n    let updateNoteData = (data: any) => {\r\n      if (!data.createNote) {\r\n        console.log('Add note: No data retreived from backend.');\r\n        return;\r\n      }\r\n      const { _id, title, createdAt } = data.createNote;\r\n      const note = this.notes.find((note: Note) =>\r\n        !note._id && title === note.title\r\n      );\r\n      note._id = _id;\r\n      note.createdAt = createdAt;\r\n    }\r\n\r\n    this.dbOperation(NoteQueries.addNoteQuery, updateNoteData);\r\n  }\r\n\r\n  renderUpdateTitle = (noteId: string, title: string) => {\r\n    let note = this.notes.find((note: Note) =>\r\n      noteId === note._id\r\n    );\r\n    if (!note) {\r\n      console.log('Update title: note not found.');\r\n    }\r\n    note.title = title;\r\n  }\r\n\r\n  updateTitle = (noteId: string, titleString: string) => {\r\n    let note = this.notes.find((note) =>\r\n      noteId === note._id\r\n    );\r\n    if (!note) {\r\n      console.log('Update title: note not found.');\r\n      return;\r\n    }\r\n    if (note.title === titleString) {\r\n      return;\r\n    }\r\n\r\n    this.renderUpdateTitle(noteId, titleString);\r\n    this.dbOperation(NoteQueries.updateTitleQuery(noteId, titleString));\r\n  }\r\n\r\n  renderDeleteNote = (noteId: string) => {\r\n    let deleted: Boolean = false;\r\n    this.notes = this.notes.filter((note: Note) => {\r\n      deleted = deleted || noteId !== note._id;\r\n      return noteId !== note._id\r\n    });\r\n    if (!deleted) {\r\n      console.log('Delete title: note not found.');\r\n    }\r\n  }\r\n\r\n  deleteNote = (noteId: string) => {\r\n    this.renderDeleteNote(noteId);\r\n    this.dbOperation(NoteQueries.deleteNoteQuery(noteId));\r\n  }\r\n\r\n  renderAddTodo = (noteId: string, description: string) => {\r\n    this.notes = this.notes.map((note: Note) => {\r\n      if (noteId === note._id) {\r\n        note.todos.unshift({\r\n          _id: '',\r\n          description,\r\n          isChecked: false,\r\n          todoNote: note,\r\n          createdAt: null\r\n        });\r\n      }\r\n      return note;\r\n    })\r\n  }\r\n\r\n  addTodo = (noteId: string, description: string) => {\r\n    this.renderAddTodo(noteId, description);\r\n    let updateTodoData = (data: any) => {\r\n      if (!data.createTodo) {\r\n        console.log('Add todo: No data retreived from DB.');\r\n        return;\r\n      }\r\n      const { _id, description, todoNote, createdAt } = data.createTodo;\r\n      const note = this.notes.find((note: Note) =>\r\n        note._id === todoNote._id\r\n      )\r\n      const todo = note.todos.find((todo: Todo) =>\r\n        !note._id && description === todo.description\r\n      );\r\n      todo._id = _id;\r\n      todo.createdAt = createdAt;\r\n    }\r\n    this.dbOperation(TodoQueries.addTodoQuery(noteId, description), updateTodoData);\r\n  }\r\n\r\n  renderUpdateTodo = (noteId: string, updatedTodo: Todo) => {\r\n    const note = this.notes.find((note: Note) =>\r\n      noteId === note._id\r\n    );\r\n    if (!note) {\r\n      console.log('Update todo: Note not found.');\r\n      return;\r\n    }\r\n    note.todos = note.todos.map((todo: Todo) => {\r\n      return (todo._id === updatedTodo._id) ? updatedTodo : todo;\r\n    });\r\n  }\r\n\r\n  updateTodo = (noteId: string, todo: Todo) => {\r\n    this.renderUpdateTodo(noteId, todo);\r\n    this.dbOperation(TodoQueries.updateTodoQuery(todo._id, todo.description, todo.isChecked));\r\n  }\r\n\r\n  renderDeleteTodo = (noteId: string, todoId: string) => {\r\n    const note = this.notes.find((note) =>\r\n      noteId === note._id\r\n    );\r\n    if (!note) {\r\n      console.log('Delete todo: Note not found.');\r\n      return;\r\n    }\r\n    let deleted: Boolean = false;\r\n    note.todos = note.todos.filter((todo: Todo) => {\r\n      deleted = deleted || (todoId !== todo._id);\r\n      return todoId !== todo._id;\r\n    });\r\n    if (!deleted) {\r\n      console.log('Delete todo: Todo not found.');\r\n    }\r\n  }\r\n\r\n  deleteTodo = (noteId: string, todoId: string) => {\r\n    this.renderDeleteTodo(noteId, todoId);\r\n    this.dbOperation(TodoQueries.deleteTodoQuery(todoId), null);\r\n  }\r\n\r\n  dbOperation = (query: String, handleData?: Function) => {\r\n    fetch(serverUrl, {\r\n      method: 'POST',\r\n      body: JSON.stringify({ query }),\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    })\r\n      .then((res) => {\r\n        if (res.status !== 200 && res.status !== 201) {\r\n          throw new Error('DB operation failed. \\nQuery: \\n' + query);\r\n        }\r\n        return res.json();\r\n      })\r\n      .then((resData) => {\r\n        if (handleData) {\r\n          handleData(resData.data);\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log('DB operation failed. \\nQuery: \\n' + query)\r\n        console.log(err);\r\n      });\r\n  }\r\n}\r\n\r\ndecorate(MainStore, {\r\n  notes: observable,\r\n  getNotes: action,\r\n  addNote: action,\r\n  updateTitle: action,\r\n  deleteNote: action,\r\n  addTodo: action,\r\n  updateTodo: action,\r\n  deleteTodo: action\r\n})\r\n\r\nconst store = new MainStore();\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './app/App';\r\nimport { Provider } from 'mobx-react';\r\nimport Store from './stores/MainStore'\r\n\r\nconst Root = (\r\n    <Provider store={Store}>\r\n            <App />\r\n    </Provider>\r\n);\r\n\r\nReactDOM.render(Root, document.getElementById('root'));"],"sourceRoot":""}