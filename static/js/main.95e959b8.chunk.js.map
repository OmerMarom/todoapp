{"version":3,"sources":["components/nav_bar/NavBar.tsx","components/note_list/note_item/todo_list/todo_item/TodoItem.tsx","components/note_list/note_item/todo_list/TodoList.tsx","components/note_list/note_item/NoteItem.tsx","components/note_list/NoteList.tsx","app/App.tsx","queries/noteQueries.ts","queries/todoQueries.ts","stores/MainStore.ts","index.tsx"],"names":["NavBar","Menu","inverted","className","fixed","Container","Item","header","Icon","name","Component","TodoItem","inject","observer","state","todoDescription","props","todo","description","todoCheckbox","isChecked","onChange","e","setState","target","value","onEnterDown","key","preventDefault","onUpdateDescription","blur","trim","store","updateTodo","_id","deleteTodo","onToggleCheck","newTodoCheckBox","toggleCheck","nextProps","this","Checkbox","checked","html","onBlur","onKeyDown","Button","circular","icon","onClick","bind","TodoList","todos","slice","sort","todo1","todo2","Date","createdAt","map","noteId","NoteItem","newTodoString","titleString","note","title","inputString","action","onUpdateTitle","updateTitle","onAddTodo","addTodo","Card","Content","placeholder","Meta","toLocaleDateString","Description","deleteNote","Notes","notes","App","getNotes","Grid","centered","NoteList","length","addNote","Queries","notesQuery","addNoteQuery","updateTitleQuery","deleteNoteQuery","addTodoQuery","updateTodoQuery","todoId","toggleCheckQuery","deleteTodoQuery","MainStore","dbOperation","NoteQueries","data","note1","note2","console","log","createNote","unshift","find","updateNoteTitle","filter","TodoQueries","createTodo","todoNote","updateTodoDescription","toggleTodoCheck","todoDeleted","query","handleData","fetch","method","body","JSON","stringify","headers","then","res","status","Error","json","resData","catch","err","decorate","observable","Root","Store","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.95e959b8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Container, Menu, Icon } from 'semantic-ui-react'\r\nimport './NavBar.css'\r\n\r\nclass NavBar extends Component {\r\n    render() {\r\n        return (\r\n            <Menu inverted className=\"navBar\" fixed=\"top\">\r\n                <Container className=\"navBarContainer\">\r\n                    <Menu.Item header>\r\n                        <Icon className=\"logo\" name=\"sticky note outline\"/>\r\n                        TODO\r\n                    </Menu.Item>\r\n                </Container>\r\n            </Menu>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavBar;","import React, { Component } from 'react'\r\nimport ContentEditable, { ContentEditableEvent } from 'react-contenteditable'\r\nimport { Button, Checkbox } from 'semantic-ui-react'\r\nimport { inject, observer } from 'mobx-react';\r\nimport './TodoItem.css';\r\nimport { MainStore } from '../../../../../stores/MainStore';\r\nimport Todo from '../../../../../models/todo';\r\n\r\ninterface Props {\r\n    store?: MainStore;\r\n    todo: Todo;\r\n    noteId: String;\r\n}\r\n\r\nconst enterKey: string = 'Enter';\r\n\r\n@inject('store')\r\n@observer\r\nclass TodoItem extends Component<Props> {\r\n    state = {\r\n        todoDescription: this.props.todo.description,\r\n        todoCheckbox: this.props.todo.isChecked\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps: Props) {\r\n        this.setState({\r\n            todoDescription: nextProps.todo.description,\r\n            todoCheckbox: nextProps.todo.isChecked\r\n        });\r\n    }\r\n\r\n    onChange = (e: ContentEditableEvent) => {\r\n        this.setState({\r\n            todoDescription: e.target.value\r\n        })\r\n    }\r\n\r\n    onEnterDown = (e: any) => {\r\n        if (e.key === enterKey) {\r\n            e.preventDefault();\r\n            this.onUpdateDescription(e);\r\n            e.target.blur();\r\n        }\r\n    }\r\n\r\n    onUpdateDescription = (e: React.FocusEvent<HTMLDivElement>) => {\r\n        if (this.props.todo.description === this.state.todoDescription) {\r\n            return;\r\n        }\r\n        if (this.state.todoDescription.trim()) {\r\n            this.props.store.updateTodo(this.props.todo._id, this.state.todoDescription);\r\n        }\r\n        else {\r\n            this.props.store.deleteTodo(this.props.todo._id);\r\n        }\r\n    }\r\n\r\n    onToggleCheck = (e: React.FormEvent<HTMLInputElement>) => {\r\n        let newTodoCheckBox = !this.state.todoCheckbox;\r\n        this.setState({\r\n            todoCheckbox: newTodoCheckBox\r\n        });\r\n        this.props.store.toggleCheck(this.props.todo._id, newTodoCheckBox);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"todoContainer\">\r\n                <Checkbox\r\n                    className=\"todoCheckbox\"\r\n                    checked={this.state.todoCheckbox}\r\n                    onChange={this.onToggleCheck}\r\n                />\r\n                <ContentEditable\r\n                    className=\"customInput todoDescription\"\r\n                    html={this.state.todoDescription}\r\n                    onBlur={this.onUpdateDescription}\r\n                    onKeyDown={this.onEnterDown}\r\n                    onChange={this.onChange}\r\n                />\r\n                <Button\r\n                    className=\"deleteTodoButton\"\r\n                    circular icon='cancel'\r\n                    onClick={this.props.store.deleteTodo.bind(this, this.props.todo._id)}>\r\n                </Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoItem;\r\n","import React, { Component } from 'react';\r\nimport TodoItem from './todo_item/TodoItem'\r\nimport Todo from '../../../../models/todo';\r\n\r\ninterface Props {\r\n    todos: Todo[];\r\n    noteId: String;\r\n}  \r\n\r\nclass TodoList extends Component<Props> {\r\n    render() {\r\n        let sortedTodo = this.props.todos.slice().sort((todo1: Todo, todo2: Todo) => {\r\n            return new Date(todo1.createdAt) > new Date(todo2.createdAt) ? -1 : 1;\r\n        });\r\n        return sortedTodo.map((todo: Todo) => (\r\n            <TodoItem\r\n                todo={todo}\r\n                noteId={this.props.noteId}\r\n            />\r\n        ));\r\n    }\r\n}\r\n\r\nexport default TodoList;","import React, { Component } from 'react'\r\nimport ContentEditable, { ContentEditableEvent } from 'react-contenteditable'\r\nimport { Card, Button, Icon } from 'semantic-ui-react'\r\nimport TodoList from './todo_list/TodoList';\r\nimport { inject, observer } from 'mobx-react';\r\nimport './NoteItem.css';\r\nimport {MainStore} from '../../../stores/MainStore'\r\nimport Note from '../../../models/Note';\r\n\r\ninterface Props {\r\n    store?: MainStore;\r\n    note: Note;\r\n}\r\n\r\n@inject('store')\r\n@observer\r\nclass NoteItem extends Component<Props> {\r\n    state = {\r\n        newTodoString: '',\r\n        titleString: this.props.note.title.trim()\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps: Props) {\r\n        this.setState({\r\n            titleString: nextProps.note.title.trim()\r\n        });\r\n    }\r\n\r\n    onChange = (inputString: string, e: ContentEditableEvent) => {\r\n        this.setState({\r\n            [inputString]: e.target.value\r\n        });\r\n    }\r\n\r\n    onEnterDown = (action: Function, e: React.KeyboardEvent<HTMLDivElement>) => {\r\n        if (e.key === 'Enter') {\r\n            action(e);\r\n        }\r\n    }\r\n\r\n    onUpdateTitle = (e: any) => {\r\n        if (!this.state.titleString.trim()) {\r\n            this.setState({ titleString: '' });\r\n        }\r\n        this.props.store.updateTitle(this.props.note._id, this.state.titleString);\r\n        e.target.blur();\r\n    }\r\n\r\n    onAddTodo = (e: React.FocusEvent<HTMLDivElement>) => {\r\n        e.preventDefault();\r\n        if (this.state.newTodoString.trim()) {\r\n            this.props.store.addTodo(this.props.note._id, this.state.newTodoString);\r\n            this.setState({\r\n                newTodoString: ''\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { _id, todos, createdAt } = this.props.note;\r\n        return <div>\r\n            <Card className=\"noteCard\">\r\n                <Card.Content>\r\n                    <ContentEditable\r\n                        className=\"customInput noteTitle\"\r\n                        html={this.state.titleString}\r\n                        placeholder=\"Title\"\r\n                        onChange={this.onChange.bind(this, 'titleString')}\r\n                        onBlur={this.onUpdateTitle}\r\n                        onKeyDown={this.onEnterDown.bind(this, this.onUpdateTitle)} >\r\n                    </ContentEditable>\r\n                    <Card.Meta\r\n                        className=\"noteDate\">\r\n                        {new Date(createdAt).toLocaleDateString()}\r\n                    </Card.Meta>\r\n                    <Card.Description>\r\n                        <div>\r\n                            <Icon name='plus' />\r\n                            <ContentEditable\r\n                                className=\"customInput addTodoInput\"\r\n                                html={this.state.newTodoString}\r\n                                placeholder=\"New todo\"\r\n                                onBlur={this.onAddTodo}\r\n                                onKeyDown={this.onEnterDown.bind(this, this.onAddTodo)}\r\n                                onChange={this.onChange.bind(this, 'newTodoString')}\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"todoListContainer\">\r\n                            <TodoList\r\n                                todos={todos}\r\n                                noteId={_id}\r\n                            />\r\n                        </div>\r\n                        <Button\r\n                            className=\"deleteNoteButton\"\r\n                            icon='trash'\r\n                            onClick={this.props.store.deleteNote.bind(this, _id)}>\r\n                        </Button>\r\n                    </Card.Description>\r\n                </Card.Content>\r\n            </Card>\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default NoteItem;\r\n\r\n","import React, { Component } from 'react';\r\nimport NoteItem from './note_item/NoteItem'\r\nimport { inject, observer } from 'mobx-react';\r\nimport { MainStore } from '../../stores/MainStore'\r\nimport Note from '../../models/Note'\r\n\r\ninterface Props {\r\n    store?: MainStore;\r\n}\r\n\r\n@inject('store')\r\n@observer\r\nclass Notes extends Component<Props> {\r\n    render() {\r\n        return this.props.store.notes.map((note: Note) => (\r\n            <NoteItem note={note} />\r\n        ));\r\n    }\r\n}\r\n\r\nexport default Notes;","import React, { Component } from 'react';\r\nimport NavBar from '../components/nav_bar/NavBar';\r\nimport NoteList from '../components/note_list/NoteList';\r\nimport './App.css';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport { Button, Grid } from 'semantic-ui-react'\r\nimport { inject, observer } from 'mobx-react';\r\nimport { MainStore } from '../stores/MainStore'\r\n\r\ninterface Props {\r\n  store?: MainStore;\r\n}\r\n\r\n@inject('store')\r\n@observer\r\nclass App extends Component<Props> {\r\n  componentDidMount() {\r\n    this.props.store.getNotes();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\"> \r\n        <NavBar />\r\n        <div className=\"navBarPlaceholder\" />\r\n        <div className=\"container\">\r\n          <Grid centered={true}>\r\n            <NoteList />\r\n          </Grid>\r\n          { this.props.store.notes.length < 10 && \r\n            <Button \r\n              circular icon = \"plus\"\r\n              className=\"addNoteButton\"\r\n              onClick={this.props.store.addNote}\r\n            /> \r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default App;","class QueriesStrings {\r\n    notesQuery: String = `\r\n        query {\r\n            notes {\r\n                _id\r\n                title\r\n                todos {\r\n                    _id\r\n                    description\r\n                    isChecked\r\n                    createdAt\r\n                }\r\n                createdAt\r\n            }\r\n        }\r\n    `;\r\n\r\n    addNoteQuery: String = `\r\n        mutation {\r\n            createNote {\r\n                _id\r\n                title\r\n                todos {\r\n                    _id\r\n                    description\r\n                    isChecked\r\n                    createdAt\r\n                }\r\n                createdAt\r\n            }\r\n        }\r\n    `;\r\n\r\n    updateTitleQuery = (noteId: String, titleString: String): String => `\r\n        mutation {\r\n            updateNoteTitle(updatedNote: {\r\n                _id: \"${noteId}\",\r\n                title: \"${titleString}\"\r\n            }) {\r\n                _id\r\n                title\r\n            }\r\n        }\r\n    `;\r\n\r\n    deleteNoteQuery = (noteId: String): String => `\r\n        mutation {\r\n            deleteNote(noteId: \"${noteId}\") {\r\n                _id\r\n            }\r\n        }\r\n    `;\r\n}\r\n\r\nconst Queries: QueriesStrings = new QueriesStrings();\r\nexport default Queries;","class QueriesStrings {\r\n    addTodoQuery = (noteId: String, description: String): String => `\r\n    mutation {\r\n        createTodo(newTodo:{description: \"${description}\", todoNote: \"${noteId}\"}) {\r\n            _id\r\n            description\r\n            isChecked\r\n            todoNote {\r\n                _id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nupdateTodoQuery = (todoId: String, description: String): String => `\r\n    mutation {\r\n        updateTodoDescription(updatedTodo: {_id: \"${todoId}\", description: \"${description}\"}) {\r\n            _id\r\n            description\r\n            todoNote {\r\n                _id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\ntoggleCheckQuery = (todoId: String, isChecked: Boolean): String => `\r\n    mutation {\r\n        toggleTodoCheck(updatedTodo: {_id: \"${todoId}\", isChecked: ${isChecked}}) {\r\n            _id\r\n            isChecked\r\n            todoNote {\r\n                _id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\ndeleteTodoQuery = (todoId: String): String => `\r\n    mutation {\r\n        deleteTodo(todoId: \"${todoId}\") {\r\n            _id\r\n            todoNote {\r\n                _id\r\n            }\r\n        }\r\n    }\r\n`;\r\n}\r\n\r\nconst Queries: QueriesStrings = new QueriesStrings();\r\nexport default Queries;","import { observable, action, decorate } from 'mobx';\r\nimport NoteQueries from '../queries/noteQueries';\r\nimport TodoQueries from '../queries/todoQueries';\r\nimport Note from '../models/Note';\r\nimport Todo from '../models/todo';\r\n\r\nconst serverUrl = 'http://localhost:80/graphql';\r\n\r\nexport class MainStore {\r\n  notes: Array<Note> = [];\r\n\r\n  getNotes = () => {\r\n    let renderNotes = (data: any) => {\r\n      if (data.notes) {\r\n        this.notes = data.notes.slice().sort(\r\n          (note1: Note, note2: Note) => {\r\n            return new Date(note1.createdAt) > new Date(note2.createdAt) ? -1 : 1;\r\n          })\r\n      }\r\n      else {\r\n        console.log('Get notes: No data retreived from backend.');\r\n        return;\r\n      }\r\n    };\r\n\r\n    this.dbOperation(NoteQueries.notesQuery, renderNotes);\r\n  }\r\n\r\n  addNote = () => {\r\n    let renderAddNote = (data: any) => {\r\n      if (data.createNote) {\r\n        this.notes.unshift({\r\n          _id: data.createNote._id,\r\n          title: data.createNote.title,\r\n          todos: data.createNote.todos,\r\n          createdAt: data.createNote.createdAt\r\n        });\r\n      }\r\n      else {\r\n        console.log('Add note: No data retreived from backend.');\r\n        return;\r\n      }\r\n    }\r\n\r\n    this.dbOperation(NoteQueries.addNoteQuery, renderAddNote);\r\n  }\r\n\r\n  updateTitle = (noteId: String, titleString: String) => {\r\n    let note = this.notes.find((note) =>\r\n      noteId === note._id\r\n    );\r\n    if (!note) {\r\n      console.log('Update title: note not found.');\r\n      return;\r\n    }\r\n    if (note.title === titleString) {\r\n      return;\r\n    }\r\n\r\n    let renderUpdateTitle = (data: any) => {\r\n      let note = this.notes.find((note) =>\r\n        data.updateNoteTitle._id === note._id\r\n      );\r\n      if (!note) {\r\n        console.log('Update title: note not found.');\r\n      }\r\n      note.title = data.updateNoteTitle.title;\r\n    }\r\n\r\n    this.dbOperation(NoteQueries.updateTitleQuery(noteId, titleString),\r\n      renderUpdateTitle);\r\n  }\r\n\r\n  deleteNote = (noteId: String) => {\r\n    let renderDeleteNote = (data: any) => {\r\n      if (data.deleteNote) {\r\n        this.notes = this.notes.filter((note) =>\r\n          note._id !== data.deleteNote._id\r\n        );\r\n      }\r\n      else {\r\n        console.log('Delete note: No data retreived from DB.');\r\n        return;\r\n      }\r\n    }\r\n\r\n    this.dbOperation(NoteQueries.deleteNoteQuery(noteId), renderDeleteNote);\r\n  }\r\n\r\n  addTodo = (noteId: String, description: String) => {\r\n    let renderAddTodo = (data: any) => {\r\n      if (!data.createTodo) {\r\n        console.log('Add todo: No data retreived from DB.');\r\n        return;\r\n      }\r\n      const { _id, description, isChecked, todoNote, createdAt } = data.createTodo;\r\n      this.notes = this.notes.map((note) => {\r\n        if (note._id === todoNote._id) {\r\n          note.todos.unshift({\r\n            _id,\r\n            description,\r\n            isChecked,\r\n            todoNote: todoNote._id,\r\n            createdAt\r\n          });\r\n        }\r\n        return note;\r\n      })\r\n    }\r\n\r\n    this.dbOperation(TodoQueries.addTodoQuery(noteId, description),\r\n      renderAddTodo);\r\n  }\r\n\r\n  updateTodo = (todoId: String, description: String) => {\r\n    let renderUpdateTodo = (data: any) => {\r\n      if (!data.updateTodoDescription) {\r\n        console.log('Update todo: No data retreived from DB.');\r\n        return;\r\n      }\r\n      const { _id, description, todoNote } = data.updateTodoDescription;\r\n      const note = this.notes.find((note) =>\r\n        todoNote._id === note._id\r\n      );\r\n      if (!note) {\r\n        console.log('Update todo: Note not found.');\r\n        return;\r\n      }\r\n      const todo = note.todos.find((todo: Todo) =>\r\n        _id === todo._id\r\n      );\r\n      if (!todo) {\r\n        console.log('Update todo: Todo not found.');\r\n        return;\r\n      }\r\n      todo.description = description;\r\n    }\r\n\r\n    this.dbOperation(TodoQueries.updateTodoQuery(todoId, description), renderUpdateTodo);\r\n  }\r\n\r\n  toggleCheck = (todoId: String, isChecked: Boolean) => {\r\n    let renderToggleCheck = (data: any) => {\r\n      if (!data.toggleTodoCheck) {\r\n        console.log('Toggle check: No data retreived from DB.');\r\n        return;\r\n      }\r\n      const { _id, isChecked, todoNote } = data.toggleTodoCheck;\r\n      const note = this.notes.find((note) =>\r\n        todoNote._id === note._id\r\n      );\r\n      if (!note) {\r\n        console.log('Toggle check: Note not found.');\r\n        return;\r\n      }\r\n      const todo = note.todos.find((todo: Todo) =>\r\n        _id === todo._id\r\n      );\r\n      if (!todo) {\r\n        console.log('Toggle check: Todo not found.');\r\n        return;\r\n      }\r\n      todo.isChecked = isChecked;\r\n    }\r\n\r\n    this.dbOperation(TodoQueries.toggleCheckQuery(todoId, isChecked), renderToggleCheck);\r\n  }\r\n\r\n  deleteTodo = (todoId: String) => {\r\n    let renderDeleteTodo = (data: any) => {\r\n      if (!data.deleteTodo) {\r\n        console.log('Delete todo: No data retreived from DB.');\r\n        return;\r\n      }\r\n      const note = this.notes.find((note) =>\r\n        note._id === data.deleteTodo.todoNote._id\r\n      );\r\n      if (!note) {\r\n        console.log('Delete todo: Note not found.');\r\n        return;\r\n      }\r\n      let todoDeleted: Boolean = false;\r\n      note.todos = note.todos.filter((todo: Todo) => {\r\n        todoDeleted = todoDeleted || (todo._id !== data.deleteTodo._id);\r\n        return todo._id !== data.deleteTodo._id;\r\n      });\r\n      if (!todoDeleted) {\r\n        console.log('Delete todo: Todo not found.');\r\n      }\r\n    }\r\n\r\n    this.dbOperation(TodoQueries.deleteTodoQuery(todoId), renderDeleteTodo);\r\n  }\r\n\r\n  dbOperation = (query: String, handleData: Function) => {\r\n    fetch(serverUrl, {\r\n      method: 'POST',\r\n      body: JSON.stringify({ query }),\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    })\r\n      .then((res) => {\r\n        if (res.status !== 200 && res.status !== 201) {\r\n          throw new Error('DB operation failed. \\nQuery: \\n' + query);\r\n        }\r\n        return res.json();\r\n      })\r\n      .then((resData) => {\r\n        if (handleData) {\r\n          handleData(resData.data);\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  }\r\n}\r\n\r\ndecorate(MainStore, {\r\n  notes: observable,\r\n  getNotes: action,\r\n  addNote: action,\r\n  updateTitle: action,\r\n  deleteNote: action,\r\n  addTodo: action,\r\n  updateTodo: action,\r\n  toggleCheck: action,\r\n  deleteTodo: action\r\n})\r\n\r\nconst store = new MainStore();\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './app/App';\r\nimport { Provider } from 'mobx-react';\r\nimport Store from './stores/MainStore'\r\n\r\nconst Root = (\r\n    <Provider store={Store}>\r\n            <App />\r\n    </Provider>\r\n);\r\n\r\nReactDOM.render(Root, document.getElementById('root'));"],"sourceRoot":""}